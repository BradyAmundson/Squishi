Squishi {
  Program         = Statement+
  Statement 		  = PrintStatement
                  | VarDeclaration
                  | AssignStmt
                  | ForStmt
                  | Function
                  | Exp9_call ";"                                         --call
                  | break ";"                                             --break
                  | return Exp ";"                                        --return
                  | return ";"                                            --shortreturn
                  | IfStmt
                  | WhileStmt
                  | ForStmt
                  | LoopStmt
  PrintStatement 	= speak Exp ";"
  VarDeclaration	= pencil id "=" Exp ";"
  AssignStmt		  = id "=" Exp ";"
  ForStmt			    = for VarDeclaration stop Exp fastfwd AssignStmt (Statement)+ stop
  LoopStmt        = Term ".loop" id ":" Statement+ stop
  WhileStmt		    = while Exp ":" Statement+ stop
  IfStmt          = if Exp ":" Statement+ else Statement+ stop            --long
                  | if Exp ":" Statement+ stop                            --short
                  | if Exp ":" Statement+ else IfStmt --elseIf
  ElseStmt        = else ":" Statement+ stop
  ElseIfStmt      = elseIf Exp ":" Statement+ stop
  Function        = f id ListOf<Param, ","> ":" Statement+ stop
  Param           = id
  Call            = id ":" Arguments
  Arguments       = ListOf<Exp, ",">
  id				      = ~keyword idchar+
  idchar			    = alnum
  keyword			    = speak | pencil | for | step | stop | fastfwd | while | true | false | else | if | elseIf | loop
  Var				      = id

  Exp             = "!" Exp8                                              --unary
                  | Exp1
  Exp1            = Exp1 "if" Exp1 "otherwise" Exp                        --ternary
                  | Exp2
  Exp2			      = Exp2 "or" Exp3					                              --or
                  | Exp3
  Exp3			      = Exp3 "and" Exp4				                                --and
                  | Exp4
  Exp4			      = Exp4 ("<=" | "<" | "==" | "!=" | ">=" | ">") Exp5     --op
                  | Exp5
  Exp5			      = Exp5 ("+" | "-") Exp6                                 --plusminus
                  | Exp6
  Exp6			      = Exp6 ("*" | "/" | "%") Exp7                           --multdivmod
                  | Exp7
  Exp7			      = Exp7 "**" Exp8                                        --exponent
                  | Exp8
  Exp8			      = "[" Exp "]"                                           --brackets
                  | Exp9
                  | "-" Exp9                                              --negatives
  Exp9            = "(" Exp ")"                                           --parens
                  | ArrayCall
                  | Term
                  | Call                                                  --call
                  | MethodCall

  BooleanVal		  = true | false
  Term 			      = numeral
                  | stringliteral
                  | Var
                  | BooleanVal
                  | Array
                  | EmptyArray

  MethodCall      = Term "." id ("(" ListOf<Exp, ","> ")")?
  ArrayCall       = Var "[" Term "]"
  pencil			    = "pencil" ~idchar
  speak			      = "speak" ~idchar
  for				      = "for" ~idchar
  step			      = "step" ~idchar
  stop			      = "stop" ~idchar
  fastfwd			    = "fastfwd" ~idchar
  Array           = "[" ListOf<Term, ","> "]"
  EmptyArray      = "[""]" ":" Term
  while           = "while" ~idchar
  loop            = "loop" ~idchar
  true            = "true" ~idchar
  false           = "false" ~idchar
  if              = "if" ~idchar
  else            = "else" ~idchar
  elseIf          = "elseIf" ~idchar
  f               = "f" ~idchar
  break           = "break" ~idchar
  return          = "return" ~idchar
  numeral 		    = ("-")? digit+ ("." digit+)?
  stringliteral 	= "\"" (~"\""any)* "\""
  space      	   += "//" (~"\n" any)*				                              --comment
}